export interface ComponentData {
  id: string;
  name: string;
  description: string;
  category: string;
  cli?: string;
  dependencies?: string[];
  featured?: boolean;
  listed?: boolean;
  props?: IProp[];
  style?: string;
  new?: boolean;
}
interface IProp {
  name: string;
  type: string;
  required: boolean;
  defaultValue: any;
  description: string;
}

export const componentCategories = [
  "All",
  "Buttons",
  "Cards",
  "Text Effects",
  "Animations",
  "Loaders",
] as const;

// 1. Define component IDs as const
export const COMPONENT_IDS = {
  bubbleText: "bubble-text",
  waterReflectedImage: "water-reflected-image",
  progressiveHoverCard: "progressive-hover-card",
  focusedText: "focused-text",
  glassCard: "glass-card",
  card3D: "card-3d",
  typewriterText: "typewriter-text",
  aiCard: "ai-card",
  scrollNav: "scroll-nav",
  animatedButton: "animated-button",
  marquee: "marquee",
  highlightedText: "highlighted-text",
  interactiveCard: "interactive-card",
  cursorAwareButton: "cursor-aware-button",
  userAvatars: "user-avatars",
  animatedThemeToggle: "animated-theme-toggle",
  suggestiveSearch: "suggestive-search",
  hyperText: "hyper-text",
  slideText: "slide-text",
  auroraText: "aurora-text",
  scrollProgress: "scroll-progress",
  switch: "switch",
  sparkleCard: "sparkle-card",
  revealText: "reveal-text",
  maskedText: "masked-text",
  parallaxImage: "parallax-image",
  videoMaskedText: "video-masked-text",
} as const;

// 2. Define the display order using COMPONENT_IDS only
export const COMPONENT_ORDER = [
  COMPONENT_IDS.userAvatars,
  COMPONENT_IDS.bubbleText,
  COMPONENT_IDS.glassCard,
  COMPONENT_IDS.aiCard,
  COMPONENT_IDS.sparkleCard,
  COMPONENT_IDS.card3D,
  COMPONENT_IDS.revealText,
  COMPONENT_IDS.progressiveHoverCard,
  COMPONENT_IDS.parallaxImage,
  COMPONENT_IDS.suggestiveSearch,
  COMPONENT_IDS.scrollProgress,
  COMPONENT_IDS.scrollNav,
  COMPONENT_IDS.videoMaskedText,
  COMPONENT_IDS.maskedText,
  COMPONENT_IDS.cursorAwareButton,
  COMPONENT_IDS.animatedThemeToggle,
  COMPONENT_IDS.auroraText,
  COMPONENT_IDS.focusedText,
  COMPONENT_IDS.typewriterText,
  COMPONENT_IDS.interactiveCard,
  COMPONENT_IDS.switch,
  COMPONENT_IDS.marquee,
  COMPONENT_IDS.highlightedText,
  COMPONENT_IDS.animatedButton,
  COMPONENT_IDS.hyperText,
  COMPONENT_IDS.slideText,
  COMPONENT_IDS.waterReflectedImage,
] as const;

const CLI_BASE_URL = "https://components-registry.netlify.app/r";

// 3. Raw components data (same as you already have)
const rawComponentsData: ComponentData[] = [
  {
    id: COMPONENT_IDS.progressiveHoverCard,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.progressiveHoverCard}.json`,
    name: "Progressive Hover Card",
    description: "Card with progresive hover effect with smooth animation",
    category: "Card",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss"],
    new: true,
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Content to display inside the hover highlight component",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the container",
      },
      {
        name: "hoverColor",
        type: "string",
        required: false,
        defaultValue: '"bg-blue-500"',
        description: "Background color class applied on hover",
      },
    ],
  },
  {
    id: COMPONENT_IDS.focusedText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.focusedText}.json`,
    name: "Focused Text",
    description:
      "Focus effect on hover for the text or children component from the wrapper",
    category: "Text",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    new: true,
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Text content to animate",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the animated text",
      },
      {
        name: "textColor",
        type: "string",
        required: false,
        defaultValue: '"text-white"',
        description: "Text color when not hovered",
      },
      {
        name: "hoverTextColor",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Text color on hover",
      },
      {
        name: "fontSize",
        type: "string",
        required: false,
        defaultValue: '"text-base"',
        description: "Font size utility class",
      },
      {
        name: "fontWeight",
        type: "string",
        required: false,
        defaultValue: '"font-medium"',
        description: "Font weight utility class",
      },
      {
        name: "duration",
        type: "number",
        required: false,
        defaultValue: "0.3",
        description: "Animation duration in seconds",
      },
      {
        name: "direction",
        type: '"up" | "down" | "left" | "right"',
        required: false,
        defaultValue: '"up"',
        description: "Direction of text animation",
      },
      {
        name: "ease",
        type: "number[]",
        required: false,
        defaultValue: "[0.25, 0.1, 0.25, 1]",
        description: "Easing function array for the animation",
      },
    ],
  },
  {
    id: COMPONENT_IDS.card3D,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.card3D}.json`,
    name: "Card 3D",
    description: "Card component which gives 3d like effect on hover",
    category: "Card",
    featured: false,
    listed: true,
    new: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Content to display inside the tilt card",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the tilt card",
      },
      {
        name: "intensity",
        type: "number",
        required: false,
        defaultValue: "15",
        description: "Tilt intensity in degrees",
      },
      {
        name: "scale",
        type: "number",
        required: false,
        defaultValue: "1.05",
        description: "Scale factor when hovered",
      },
      {
        name: "glareEffect",
        type: "boolean",
        required: false,
        defaultValue: "true",
        description: "Whether to show glare effect on tilt",
      },
      {
        name: "shadowEffect",
        type: "boolean",
        required: false,
        defaultValue: "true",
        description: "Whether to show shadow effect on tilt",
      },
    ],
  },
  {
    id: COMPONENT_IDS.cursorAwareButton,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.cursorAwareButton}.json`,
    name: "Cursor Aware Button",
    description: "Button which have the cursor aware ripple effect animations",
    category: "Button",
    featured: false,
    listed: true,
    new: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Content to display inside the button",
      },
      {
        name: "defaultColor",
        type: "string",
        required: false,
        defaultValue: '"bg-white"',
        description: "Background color class when not hovered",
      },
      {
        name: "hoverColor",
        type: "string",
        required: false,
        defaultValue: '"bg-yellow-400"',
        description: "Background color class on hover",
      },
      {
        name: "textColor",
        type: "string",
        required: false,
        defaultValue: '"text-gray-900"',
        description: "Text color class when not hovered",
      },
      {
        name: "hoverTextColor",
        type: "string",
        required: false,
        defaultValue: '"text-gray-900"',
        description: "Text color class on hover",
      },
      {
        name: "borderColor",
        type: "string",
        required: false,
        defaultValue: '"border-gray-300"',
        description: "Border color class for the button",
      },
      {
        name: "rounded",
        type: "string",
        required: false,
        defaultValue: '"rounded-full"',
        description: "Border radius utility class",
      },
      {
        name: "size",
        type: "string",
        required: false,
        defaultValue: '"px-8 py-3"',
        description: "Padding size classes for the button",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the button",
      },
      {
        name: "onClick",
        type: "() => void",
        required: false,
        defaultValue: undefined,
        description: "Callback function when the button is clicked",
      },
      {
        name: "...props",
        type: "MotionProps",
        required: false,
        defaultValue: undefined,
        description:
          "Additional props to pass to the motion component (from framer-motion)",
      },
    ],
  },
  {
    id: COMPONENT_IDS.bubbleText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.bubbleText}.json`,
    name: "Bubble Text",
    description:
      "Bubble text is a lens like view which shows an inverted things through the bubble",
    category: "Text",
    featured: true,
    listed: true,
    new: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "text",
        type: "string",
        required: false,
        defaultValue: '"The digital marketing agency"',
        description: "Text content to display inside the bubble",
      },
      {
        name: "bubbleSize",
        type: "number",
        required: false,
        defaultValue: "120",
        description: "Size of the bubble in pixels (width and height)",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the bubble component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.glassCard,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.glassCard}.json`,
    name: "Glass Card",
    description: "Card component that have Glass morphic effect",
    category: "Card",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed inside the component",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.maskedText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.maskedText}.json`,
    name: "Masked Text",
    description:
      "Text with the background image which is visible through the masked effect",
    category: "Text",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "text",
        type: "string",
        required: true,
        defaultValue: undefined,
        description: "The text content to be displayed with mask effect",
      },
      {
        name: "imageUrl",
        type: "string",
        required: true,
        defaultValue: undefined,
        description: "URL of the image to be used as mask for the text",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.typewriterText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.typewriterText}.json`,
    name: "Typewriter Text",
    description:
      "Typewriter effect for text which can be configured as per usecases",
    category: "Text",
    featured: false,
    listed: true,
    new: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "text",
        type: "string",
        required: true,
        defaultValue: undefined,
        description: "The text content to display in the typewriter effect",
      },
      {
        name: "duration",
        type: "number",
        required: false,
        defaultValue: "100",
        description:
          "Interval duration in milliseconds between typing each character",
      },
      {
        name: "loop",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Whether to loop the typing effect",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the component",
      },
      {
        name: "withCursor",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Whether to show a blinking cursor at the end of the text",
      },
    ],
  },
  {
    id: COMPONENT_IDS.revealText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.revealText}.json`,
    name: "Text Reveal",
    description: "Text with animated effect of reveal",
    category: "Text",
    featured: true,
    listed: true,
    new: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "text",
        type: "string[]",
        required: false,
        defaultValue: '["How are you?"]',
        description: "Array of text strings to be displayed",
      },
      {
        name: "duration",
        type: "number",
        required: false,
        defaultValue: "80",
        description: "Duration of the animation or effect",
      },
      {
        name: "textClassName",
        type: "string",
        required: false,
        defaultValue: '"text-4xl font-semibold"',
        description: "CSS classes to apply to the text element",
      },
    ],
  },
  {
    id: COMPONENT_IDS.videoMaskedText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.videoMaskedText}.json`,
    name: "Video Masked Text",
    description:
      "Text with the video background which is visible through the masked effect",
    category: "Text",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "src",
        type: "string",
        required: true,
        defaultValue: undefined,
        description: "The video source URL",
      },
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The text that will reveal the video",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Extra Tailwind classes",
      },
      {
        name: "fontSize",
        type: "string | number",
        required: false,
        defaultValue: '"20vw"',
        description: "Font size for the masked text",
      },
      {
        name: "fontWeight",
        type: "string | number",
        required: false,
        defaultValue: '"bold"',
        description: "Font weight",
      },
      {
        name: "fontFamily",
        type: "string",
        required: false,
        defaultValue: '"sans-serif"',
        description: "Font family",
      },
      {
        name: "as",
        type: "ElementType",
        required: false,
        defaultValue: '"div"',
        description: "Wrapper element type",
      },
    ],
  },
  {
    id: COMPONENT_IDS.aiCard,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.aiCard}.json`,
    name: "AI Card",
    description:
      "Card component that wraps childrens and can be easily used to highlight or give AI effect",
    category: "Card",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed inside the card",
      },
      {
        name: "gradient",
        type: "string[]",
        required: false,
        defaultValue: '["#ff00ff", "#00ffff", "#ff9900", "#ff00ff"]',
        description: "Gradient colors for border",
      },
      {
        name: "rounded",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Border radius",
      },
      {
        name: "animate",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Whether gradient should animate",
      },
      {
        name: "duration",
        type: "number",
        required: false,
        defaultValue: "6",
        description: "Speed of animation in seconds",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Extra class names for wrapper",
      },
    ],
  },
  {
    id: COMPONENT_IDS.scrollNav,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.scrollNav}.json`,
    name: "Scrollbar with ToC",
    description:
      "Scrollbar that lets you see the progress and move to the specific section as well",
    category: "Scrollbar",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "sections",
        type: "Section[]",
        required: true,
        defaultValue: undefined,
        description: "Array of sections to navigate through",
      },
      {
        name: "headerOffset",
        type: "number",
        required: false,
        defaultValue: "-72",
        description: "Offset for header when scrolling to sections",
      },
    ],
  },
  {
    id: COMPONENT_IDS.animatedButton,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.animatedButton}.json`,
    name: "Animated Button",
    description: "A sleek button with hover animations and gradient background",
    category: "Buttons",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    style: `--glow-shadow: 0 0 40px hsl(262 83% 58% / 0.3);`,
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed inside the button",
      },
      {
        name: "variant",
        type: '"primary" | "secondary" | "outline"',
        required: false,
        defaultValue: undefined,
        description: "Visual style variant of the button",
      },
      {
        name: "size",
        type: '"sm" | "md" | "lg"',
        required: false,
        defaultValue: undefined,
        description: "Size of the button",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the button",
      },
      {
        name: "onClick",
        type: "() => void",
        required: false,
        defaultValue: undefined,
        description: "Callback function triggered when the button is clicked",
      },
    ],
  },
  {
    id: COMPONENT_IDS.marquee,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.marquee}.json`,
    name: "Infinite Marquee",
    description:
      "Smooth infinite scrolling text marquee with customizable speed",
    category: "Animations",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed in the marquee",
      },
      {
        name: "speed",
        type: "number",
        required: false,
        defaultValue: undefined,
        description: "Speed of the marquee animation",
      },
      {
        name: "direction",
        type: '"left" | "right"',
        required: false,
        defaultValue: undefined,
        description: "Direction of the marquee movement",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the marquee",
      },
      {
        name: "pauseOnHover",
        type: "boolean",
        required: false,
        defaultValue: undefined,
        description: "Whether to pause the marquee animation on hover",
      },
    ],
  },
  {
    id: COMPONENT_IDS.highlightedText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.highlightedText}.json`,
    name: "Highlighted Text",
    description: "Text with animated highlight background effect",
    category: "Text Effects",
    featured: false,
    listed: false,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The text content to be highlighted",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
      {
        name: "highlightColor",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Color for the highlight effect",
      },
      {
        name: "delay",
        type: "number",
        required: false,
        defaultValue: undefined,
        description: "Delay before the highlight animation starts",
      },
    ],
  },
  {
    id: COMPONENT_IDS.interactiveCard,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.interactiveCard}.json`,
    name: "Interactive Card",
    description: "Card with tilt effect and animated border on hover",
    category: "Cards",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed inside the interactive card",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the card",
      },
    ],
  },
  {
    id: COMPONENT_IDS.userAvatars,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.userAvatars}.json`,
    name: "User Avatars",
    description:
      "User avatars with scale and reveal animation with name visibility on hover",
    category: "Avatars",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "users",
        type: "User[]",
        required: true,
        defaultValue: undefined,
        description: "List of users with id, name, and image",
      },
      {
        name: "size",
        type: "number | string",
        required: false,
        defaultValue: "56",
        description: "Avatar size in px",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Extra classNames for container",
      },
      {
        name: "maxVisible",
        type: "number",
        required: false,
        defaultValue: "7",
        description: "Max number of visible avatars before showing +X bubble",
      },
      {
        name: "overlap",
        type: "number",
        required: false,
        defaultValue: "60",
        description: "Overlap percentage between avatars",
      },
      {
        name: "focusScale",
        type: "number",
        required: false,
        defaultValue: "1.2",
        description: "Hover scale factor",
      },
      {
        name: "isRightToLeft",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Display avatars from right to left",
      },
      {
        name: "isOverlapOnly",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Only overlap avatars, no shifting on hover",
      },
      {
        name: "tooltipPlacement",
        type: '"top" | "bottom"',
        required: false,
        defaultValue: '"bottom"',
        description: "Tooltip placement",
      },
    ],
  },
  {
    id: COMPONENT_IDS.animatedThemeToggle,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.animatedThemeToggle}.json`,
    name: "Animated Theme Toggle",
    description:
      "Animated Button to Toggle the theme with ripple effect, giving a great UX",
    category: "Theme Toggle",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
      {
        name: "DarkIcon",
        type: 'ForwardRefExoticComponent<Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>>',
        required: false,
        defaultValue: "Sun",
        description: "Icon component to display in dark mode",
      },
      {
        name: "LightIcon",
        type: 'ForwardRefExoticComponent<Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>>',
        required: false,
        defaultValue: "Moon",
        description: "Icon component to display in light mode",
      },
    ],
  },
  {
    id: COMPONENT_IDS.suggestiveSearch,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.suggestiveSearch}.json`,
    name: "Suggestive Search",
    description: "Search component with animated suggestions and effects",
    category: "Search",
    featured: true,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "onChange",
        type: "(val: string) => void",
        required: false,
        defaultValue: undefined,
        description: "Callback function triggered when the input value changes",
      },
      {
        name: "suggestions",
        type: "string[]",
        required: false,
        defaultValue:
          '["Search your favourite movie", "Search user from connection"]',
        description: "Array of suggestion strings to display",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
      {
        name: "Leading",
        type: "() => JSX.Element",
        required: false,
        defaultValue:
          '() => <Search className="size-4 text-muted-foreground" />',
        description: "Component to render a leading icon or element",
      },
      {
        name: "showLeading",
        type: "boolean",
        required: false,
        defaultValue: "true",
        description: "Show or hide the leading icon",
      },
      {
        name: "Trailing",
        type: "() => JSX.Element",
        required: false,
        defaultValue:
          '() => <Search className="size-4 text-muted-foreground" />',
        description: "Component to render a trailing icon or element",
      },
      {
        name: "showTrailing",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description: "Show or hide the trailing icon",
      },
      {
        name: "effect",
        type: '"typewriter" | "slide" | "fade" | "none"',
        required: false,
        defaultValue: '"typewriter"',
        description: "Convenience selection of built-in effects",
      },
      {
        name: "EffectComponent",
        type: "React.ComponentType<EffectRendererProps>",
        required: false,
        defaultValue: undefined,
        description: "Override with a custom Effect component",
      },
      {
        name: "typeDurationMs",
        type: "number",
        required: false,
        defaultValue: "500",
        description: "Duration in milliseconds for typing animation",
      },
      {
        name: "deleteDurationMs",
        type: "number",
        required: false,
        defaultValue: "300",
        description: "Duration in milliseconds for deleting animation",
      },
      {
        name: "pauseAfterTypeMs",
        type: "number",
        required: false,
        defaultValue: "1500",
        description: "Pause duration after typing animation completes",
      },
      {
        name: "animateMode",
        type: '"infinite" | "once"',
        required: false,
        defaultValue: '"infinite"',
        description: "Play suggestions forever or only once",
      },
    ],
  },
  {
    id: COMPONENT_IDS.hyperText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.hyperText}.json`,
    name: "Hyper Text",
    description:
      "Animated Hyper Text component that reveals the actual text with defined delay and animation",
    category: "Text",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss"],
    props: [
      {
        name: "texts",
        type: "string[]",
        required: true,
        defaultValue: undefined,
        description: "Array of text strings to toggle between",
      },
      {
        name: "transitionDurationMs",
        type: "number",
        required: false,
        defaultValue: "60",
        description: "Scramble frame interval in milliseconds (default: 60ms)",
      },
      {
        name: "holdDurationMs",
        type: "number",
        required: false,
        defaultValue: "2500",
        description:
          "Hold readable text duration in milliseconds before scrambling (default: 2500ms)",
      },
    ],
  },
  {
    id: COMPONENT_IDS.slideText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.slideText}.json`,
    name: "Slide Text",
    description:
      "Animated Slide Text component that loops through all the texts with specified delay",
    category: "Text",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "texts",
        type: "string[]",
        required: true,
        defaultValue: undefined,
        description: "Array of text strings to slide",
      },
      {
        name: "delay",
        type: "number",
        required: false,
        defaultValue: "2000",
        description:
          "Delay in milliseconds between slide transitions (default: 2000)",
      },
      {
        name: "loop",
        type: "boolean",
        required: false,
        defaultValue: "true",
        description:
          "Whether to loop the sliding text infinitely (default: true)",
      },
      {
        name: "direction",
        type: '"up" | "down"',
        required: false,
        defaultValue: '"up"',
        description: "Slide direction (up or down)",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.auroraText,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.auroraText}.json`,
    name: "Aurora Text",
    description:
      "Animated Aurora Text component that animates the gradients inside the text",
    category: "Text",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "text",
        type: "string",
        required: true,
        defaultValue: undefined,
        description: "The text content to display with the aurora effect",
      },
      {
        name: "type",
        type: "AuroraType",
        required: false,
        defaultValue: '"always"',
        description:
          '"always" = animation runs continuously; "hover" = animation only on hover',
      },
      {
        name: "gradient",
        type: "string",
        required: false,
        defaultValue: '"from-primary-foreground via-yellow-500 to-pink-500"',
        description:
          "Gradient stop classes for the text effect (without the `bg-gradient-to-r` prefix)",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.scrollProgress,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.scrollProgress}.json`,
    name: "Scroll Progress",
    description:
      "Scroll Progress Component which can be used to add the progress view in top, bottom, left or right view",
    category: "Scroll",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "targetRef",
        type: "RefObject<HTMLElement>",
        required: false,
        defaultValue: undefined,
        description: "Ref of the scrollable container",
      },
      {
        name: "size",
        type: "number",
        required: false,
        defaultValue: "3",
        description: "Thickness of the progress bar",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes for styling",
      },
      {
        name: "position",
        type: "Position",
        required: false,
        defaultValue: '"top"',
        description: "Position of the progress bar (e.g., top, bottom)",
      },
    ],
  },
  {
    id: COMPONENT_IDS.switch,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.switch}.json`,
    name: "Switch",
    description: "Switch component that smoothly toggles the state",
    category: "Switch",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "value",
        type: "boolean",
        required: true,
        defaultValue: undefined,
        description: "Current state of the switch (on/off)",
      },
      {
        name: "onToggle",
        type: "() => void",
        required: true,
        defaultValue: undefined,
        description: "Callback function triggered when the switch is toggled",
      },
      {
        name: "iconOn",
        type: "ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Icon to display when the switch is ON",
      },
      {
        name: "iconOff",
        type: "ReactNode",
        required: true,
        defaultValue: undefined,
        description: "Icon to display when the switch is OFF",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: undefined,
        description: "Additional CSS classes to apply to the switch component",
      },
    ],
  },
  {
    id: COMPONENT_IDS.sparkleCard,
    cli: `${CLI_BASE_URL}/${COMPONENT_IDS.sparkleCard}.json`,
    name: "Sparkle Card",
    description:
      "Card component that have a sparkling effect in the background",
    category: "Card",
    featured: false,
    listed: true,
    dependencies: ["tailwindcss", "motion/react"],
    props: [
      {
        name: "children",
        type: "React.ReactNode",
        required: true,
        defaultValue: undefined,
        description: "The content to be displayed inside the card",
      },
      {
        name: "className",
        type: "string",
        required: false,
        defaultValue: '""',
        description: "Additional CSS classes to apply to the card container",
      },
      {
        name: "sparkleIntensity",
        type: '"low" | "medium" | "high"',
        required: false,
        defaultValue: '"medium"',
        description: "Controls the intensity and frequency of sparkle effects",
      },
      {
        name: "sparkleColor",
        type: "string",
        required: false,
        defaultValue: '"#ffffff"',
        description: "Hex color code for the sparkle particles",
      },
      {
        name: "disabled",
        type: "boolean",
        required: false,
        defaultValue: "false",
        description:
          "When true, disables the sparkle animation and interaction",
      },
      {
        name: "onClick",
        type: "(event: MouseEvent) => void",
        required: false,
        defaultValue: "undefined",
        description: "Callback function triggered when the card is clicked",
      },
      {
        name: "animationDuration",
        type: "number",
        required: false,
        defaultValue: "2000",
        description: "Duration of one sparkle animation cycle in milliseconds",
      },
      {
        name: "variant",
        type: '"default" | "glass" | "neon"',
        required: false,
        defaultValue: '"default"',
        description:
          "Visual variant of the card affecting background and border styles",
      },
    ],
  },
];

export const componentsData = rawComponentsData.sort(
  (a, b) =>
    COMPONENT_ORDER.indexOf(a.id as (typeof COMPONENT_ORDER)[number]) -
    COMPONENT_ORDER.indexOf(b.id as (typeof COMPONENT_ORDER)[number])
);

export const getFeaturedComponents = () =>
  componentsData.filter((comp) => comp.featured);

export const getAllComponents = (listed = false) =>
  componentsData?.filter((comp) => !listed || comp.listed);

export const getComponentById = (id: string) =>
  componentsData.find((comp) => comp.id === id);
